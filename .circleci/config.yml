version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Install AWS CLI
          when: on_fail
          command: |
            if ! [ -x "$(command -v aws)" ]; then
            pip install awscli
            else
            echo "AWS CLI already installed"
            fi

      - run:
          name: Remove S3 files
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} \
            --recursive
      - run:
          name: Delete S3 bucket
          when: on_fail
          command: |
            aws s3 rb s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} \
            --force
      - run:
          name: Delete frontend stack
          when: on_fail
          command: |
            aws cloudformation delete-stack \
            --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Delete backend stack
          when: on_fail
          command: |
            aws cloudformation delete-stack \
            --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}


  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            migrationSuccess=$(curl -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" \
            --request GET https://api.memstash.io/values/migration_status_${CIRCLE_WORKFLOW_ID})
            if [[ $migrationSuccess==1 ]]
            then
              cd /home/circleci/project/backend
              npm install
              npm run migrations:revert
            fi
          when: on_fail

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [ frontend-build ]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [ frontend/node_modules ]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [ backend-build ]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          paths: [ backend/node_modules ]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0

    steps:
      - checkout
      - restore_cache:
          keys: [ frontend-build ]
      - run:
          name: Front-end test
          command: |
            cd frontend
            npm i
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [ backend-build ]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm i
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [ frontend-build ]
      - run:
          name: Front-end scan & analyz
          command: |
            cd frontend
            npm i
            npm audit fix --audit-level=critical --force


  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [ backend-build ]
      - run:
          name: Back-end scan & analyz
          command: |
            cd backend
            rm -rf package-lock.json node_modules
            npm i
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo -e "[web]\n" > ./.circleci/ansible/inventory.txt
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople-backend" \
            --output text >> ./.circleci/ansible/inventory.txt
            cat ./.circleci/ansible/inventory.txt

      - run:
          name: Add backend IP to a temp file
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople-backend" \
            --output text > ./.circleci/ansible/IP.txt
            cat ./.circleci/ansible/IP.txt


      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment


  configure-infrastructure:
    docker:
      - image: "python:3.7-alpine3.11"
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [ "22:d8:7f:d0:24:24:c9:f1:44:72:26:56:82:04:2c:19" ]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update tar
            apk add --update gzip
      - run:
          name: install deps
          command: |
            apk add --update ansible curl unzip rsync
      - run:
          name: install aws cli to stop resources
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install
            aws --version
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment


  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: install awscli to stop resources
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            aws --version
      - restore_cache:
          keys: [ backend-build ]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              echo "DB migration was successful..."
              curl -H "Content-Type: text/plain" -H "token: f4b4bd3c-cff7-4a14-95de-8f7f0e5cdd47" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            else
              echo "DB migration failed..."
              curl -H "Content-Type: text/plain" -H "token: f4b4bd3c-cff7-4a14-95de-8f7f0e5cdd47" --request PUT --data "0" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            fi
      - destroy_environment
      # Here's where you will add some code to rollback on failure

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar
            yum -y install gzip
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs
      - restore_cache:
          keys: [ frontend-build ]
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=`cat ./.circleci/ansible/IP.txt`
            export API_URL="http://${BACKEND_IP}:3030"
            cd ./frontend
            touch ./.env
            echo API_URL=$API_URL >> ./.env
            echo $API_URL
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
      - revert-migrations


  deploy-backend:
    docker:
      - image: "python:3.7-alpine3.11"
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [ "22:d8:7f:d0:24:24:c9:f1:44:72:26:56:82:04:2c:19" ]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update tar
            apk add --update gzip
            apk add --update curl
            apk add --update openssh-client
      - run:
          name: install aws cli to stop resources
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install
            aws --version

      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml

      - destroy-environment
      - revert-migrations






            # your code here
            # Here's where you will add some code to rollback on failure
            #
            #  smoke-test:
            #    docker:
            #      # Lightweight Docker image
            #    steps:
            #      # Checkout code from git
            #      - run:
            #          name: Install dependencies
            #          command: |
            #            # your code here
            #      - run:
            #          name: Get backend url
            #          command: |
            #            # your code here
            #      - run:
            #          name: Backend smoke test.
            #          command: |
            #            # your code here
            #      - run:
            #          name: Frontend smoke test.
            #          command: |
            #            # your code here
            #      # Here's where you will add some code to rollback on failure
            #
            #  cloudfront-update:
            #    docker:
            #      # Docker image here that supports AWS CLI
            #    steps:
            #      # Checkout code from git
            #      - run:
            #          name: Install dependencies
            #          command: |
            #            # your code here
            #      - run:
            #          name: Update cloudfront distribution
            #          command: |
            #            # your code here
            #      # Here's where you will add some code to rollback on failure
            #
            #cleanup:
            #    docker:
            #      # Docker image here
            #    steps:
            #      # Checkout code from git
            #      - run:
            #          name: Get old stack workflow id
            #          command: |
            #            # your code here
            #            export OldWorkflowID="the id here"
            #            export STACKS=[] #put the list of stacks here
            #      - run:
            #          name: Remove old stacks and files
            #          command: |
            #            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            #            then
            #              # your code here
            #            fi


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [ build-frontend ]
      - test-backend:
          requires: [ build-backend ]
      - scan-backend:
          requires: [ build-backend ]
      - scan-frontend:
          requires: [ build-frontend ]
      - deploy-infrastructure:
          requires: [ test-frontend, test-backend, scan-frontend, scan-backend ]
      - configure-infrastructure:
          requires: [ deploy-infrastructure ]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
#      - smoke-test:
#          requires: [deploy-backend, deploy-frontend]
#      - cloudfront-update:
#          requires: [smoke-test]
#      - cleanup:
#          requires: [cloudfront-update]